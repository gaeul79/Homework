# GitHub Actions 스크립트: CI/CD 파이프라인 자동화

# 필요한 secret 환경 변수
# YML: application.yml 파일
# YML_PROD: application-prod.yml 파일
# YML_SWAGGER: application-swagger.yml 파일
# YML_JWT: application-jwt.yml 파일
# DOCKER_USERNAME: 도커 로그인 아이디(이메일)
# DOCKER_TOKEN: 비밀번호(토큰도 가능)
# DOCKER_REPO: 레포지토리 이름
# DOCKER_IMAGE: 이미지 이름
# HOST_PROD: ec2 ip 주소
# PRIVATE_KEY: pem파일

# 이 이름은 GitHub Actions의 UI에서 표시됨
name: CI/CD using github actions & docker

# 스크립트를 실행시키는 이벤트를 정의
# main, dev, feat/docker 브랜치에 push 이벤트가 발생했을 때 실행
on:
  push:
    branches: [ "main", "dev", "feat/docker" ]

# 저장소에 대한 권한 설정 (여기서는 읽기 권한만 부여)
permissions:
  contents: read

# jobs: 워크플로우에서 실행될 작업 단위를 정의
jobs:
  CI-CD:
    # 워크플로우가 실행될 환경 정의 (최신 우분투 버전 사용)
    runs-on: ubuntu-latest

    # 실행할 단계 정의
    steps:
      # 1. GitHub Actions에서 현재 브랜치를 체크아웃
      - uses: actions/checkout@v3
        # GitHub 저장소에서 코드를 가져오기 위해 필요

      # 2. JDK 17 설정 (프로젝트가 Java로 작성된 경우 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'         # 사용할 Java 버전
          distribution: 'temurin'    # Temurin 배포판 선택

      # 3. Gradle 캐싱 설정 (빌드 속도를 개선)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches         # Gradle 캐시 경로
            ~/.gradle/wrapper        # Gradle 래퍼 경로
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle- # 캐시 복구 키 설정

      # 4. 환경별 설정 파일 생성 (application.yml)
      - name: make application.yml
        run: |
          mkdir -p ./src/main/resources    # resources 디렉토리 생성
          cd ./src/main/resources          # 디렉토리 이동
          touch ./application.yml          # 빈 application.yml 파일 생성
          echo "${{ secrets.YML }}" > ./application.yml # GitHub Secrets에 저장된 값으로 파일 채움
        shell: bash

      # 5. 환경별 설정 파일 생성 (application-prod.yml, application-jwt.yml 등)
      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
        shell: bash

      - name: make application-swagger.yml
        run: |
          cd ./src/main/resources
          touch ./application-swagger.yml
          echo "${{ secrets.YML_SWAGGER }}" > ./application-swagger.yml
        shell: bash

      - name: make application-jwt.yml
        run: |
          cd ./src/main/resources
          touch ./application-jwt.yml
          echo "${{ secrets.YML_JWT }}" > ./application-jwt.yml
        shell: bash

      # 6. gradlew 스크립트 실행 권한 부여
      - name: Change gradlew permissions
        run: chmod +x ./gradlew

      # 7. Gradle 빌드 실행 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 8. Docker Hub에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # 9. Docker 빌드 도구 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 10. Docker 이미지 빌드 및 Docker Hub로 푸시
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .                     # Docker 빌드 컨텍스트 설정
          file: ./Dockerfile             # Dockerfile 경로
          push: true                     # 빌드 후 이미지 푸시
          tags: ${{ secrets.DOCKER_REPO }}/${{ secrets.DOCKER_IMAGE }} # 이미지 태그 설정

      # 11. docker-compose.yml 파일 환경 변수로 저장
      - name: saving docker-compose.yml
        run: |
          YML_DOCKER_COMPOSE=$(cat ./docker-compose.yml | base64 -w 0) # 파일 내용을 Base64로 인코딩
          echo "YML_DOCKER_COMPOSE=$YML_DOCKER_COMPOSE" >> $GITHUB_ENV  # 환경 변수로 저장
          echo "$YML_DOCKER_COMPOSE" | base64 --decode                 # 디코딩 후 확인

      # 12. EC2 프로덕션 서버에 배포
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}   # EC2 퍼블릭 IPv4 DNS
          username: ubuntu                 # SSH 사용자
          key: ${{ secrets.PRIVATE_KEY }}  # SSH 키
          script: |
            echo "DOCKER_REPO=${{ secrets.DOCKER_REPO }}" > .env
            echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> .env
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env
            
            echo "${{ env.YML_DOCKER_COMPOSE }}"
            touch ./docker-compose.yml
            echo "${{ env.YML_DOCKER_COMPOSE }}" | base64 --decode > ./docker-compose.yml
            cat ./docker-compose.yml
            sudo docker compose -f ./docker-compose.yml --env-file .env down # 기존 컨테이너 종료
            sudo docker compose -f ./docker-compose.yml --env-file .env pull # 최신 이미지 가져오기
            sudo docker compose -f ./docker-compose.yml --env-file .env up -d # 컨테이너 재시작
            
            rm .env